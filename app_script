
function test() {
  insertData("1UZJGt6GpTMkJiizL4pAR6OCPcAptsJ-SkbzjzFOLDsc", "Max Reid", "maxwellreid@google.com","This is a comment",{"This Is A Test":1234},
  [
    {
      "Transaction Date": "2021-02-09",
      "Transaction ID": "827103",
      "Category": "Cash Withdrawal",
      "Amount": "$560.00",
      "Balance": "$5,745.35",
      "Type": "Debit",
      "Account ID": "3404",
      "Value": "$560.00"
    },
    {
      "Transaction Date": "2021-02-10",
      "Transaction ID": "827103",
      "Category": "Cash Withdrawal",
      "Amount": "$560.00",
      "Balance": "$5,745.35",
      "Type": "Debit",
      "Account ID": "3404",
      "Value": "$980.00"
    },
    {
      "Transaction Date": "2021-02-11",
      "Transaction ID": "827103",
      "Category": "Cash Withdrawal",
      "Amount": "$560.00",
      "Balance": "$5,745.35",
      "Type": "Debit",
      "Account ID": "3404",
      "Value": "$980.00"
    },
    {
      "Transaction Date": "2021-02-12",
      "Transaction ID": "827103",
      "Category": "Cash Withdrawal",
      "Amount": "$560.00",
      "Balance": "$5,745.35",
      "Type": "Debit",
      "Account ID": "3404",
      "Value": "$980.00"
    }
    ])
}

function replace_nulls(body) {
  Logger.log(body)
  Object.keys(body).forEach(function(key) {
    if(body[key] === '') {
      body[key] = null;
    }
  })
  Logger.log(body)
}

function unObjectifyToTable (data, body) {

  // get the first table
  var table = body.getTables()[0]; 

  // get the formatting
  var attributes_header = table.getCell(0,0).getAttributes();
  var attributes_body = table.getCell(1,0).getAttributes();
  if (attributes_body['BACKGROUND_COLOR'] === '') {
    attributes_body['BACKGROUND_COLOR'] = null
  }
  if (attributes_header['BACKGROUND_COLOR'] === '') {
    attributes_header['BACKGROUND_COLOR'] = null
  }

  // delete all the rows
  while ( table.getNumRows() > 0) {
    table.removeRow(table.getNumRows() -1);
  }
  if (!data.length) {
    return table;
  }
  
  // these are the heads
  var heads = Object.keys(data[0]);
  
  // append the headers
  var tr = table.appendTableRow();
  heads.forEach (function (d) {
    tr.appendTableCell(d).setAttributes(attributes_header);
  });
  
  // Logger.log('bc')
  // Logger.log(attributes_body['BACKGROUND_COLOR'])
  // Logger.log(attributes_body['BACKGROUND_COLOR'] === '')
  // Logger.log(attributes_body['BACKGROUND_COLOR'] === null)
  // attributes_body['BACKGROUND_COLOR'] = null
  // Logger.log(attributes_body)

  // and the data
  data.forEach (function (row) {
    var tr = table.appendTableRow();
    heads.forEach (function (d) {
       tr.appendTableCell(row[d]).setAttributes(attributes_body);
    });
  });
  return table;
  
}

function filters_string_test(filters) {
  var filters_string = '';
  for (const [key, value] of Object.entries(filters)) {
    Logger.log('key: '+ key);
    Logger.log('value: '+value);
    filters_string += key + ': ' + value + '\n';
    Logger.log(filters_string)
  }
  return filters_string;
}

function test2() {
  filters_string = filters_string_test({"This Is A Test":1234, "This Is Another Test": 4567});
  Logger.log(filters_string)
}


function insertData(documentId, name, email, comments, filters, lines) {
  var string_ = ''
  try{
    string_ +=JSON.stringify(name)
    string_ +=JSON.stringify(email)
    string_ +=JSON.stringify(comments)
    string_ +=JSON.stringify(filters)
  }catch(err){
    Logger.log(err)
  }
  Logger.log(string_)
  // var client_id = filters["client_id"]
  // var timeframe = filtesr["timeframe"]
  var body = DocumentApp.openById(documentId).getBody();

  var currentdate = new Date(); 
  var date_time = currentdate.getDate() + "/"
                + (currentdate.getMonth()+1)  + "/" 
                + currentdate.getFullYear() + " @ "  
                + currentdate.getHours() + ":"  
                + currentdate.getMinutes() + ":" 
                + currentdate.getSeconds();

  var filters_string = '';
  for (const [key, value] of Object.entries(filters)) {
    filters_string += key + ': ' + value + '\n';
    Logger.log(filters_string)
  }
  unObjectifyToTable(lines, body);
  body.replaceText('#{Filters}', filters_string);  
  
  body.replaceText('#{Name}', name);  
  body.replaceText('#{Email}', email);  
  body.replaceText('#{Time}', date_time);  
  // body.replaceText('#{Timeframe}', timeframe);
  body.replaceText('#{Comments}', comments);
  // body.replaceText('#{Client ID}', client_id);

  // Logger.log("START lines="+lines);
  // var placeholder = findPlaceholder(body, '#{TransactionDate}');
  // Logger.log("res="+placeholder);  
  // var table = findContainingTable(placeholder);
  // Logger.log("table="+table);  

  


  // first, find copy DataHeader and Data for number of headers, replacing with the Header Name
  // Then, starting on line 2 iterate through and replace the headers with the data

  // for (const [key, value] of Object.entries(lines)) {
  //   copy 
  // }




  // var totalAmount = 0.0;
  // var counter = 0;
  // for (var i=lines.length;i>0;i--) {
  //   counter++;
  //   var tableRow = findContainingTableRow(placeholder);
  //   var numberOfRows = table.getNumRows()
  //   if (i>1) {
  //     Logger.log("inserting at "+(lines.length-i+1));  
  //     tableRow = table.insertTableRow(lines.length-i+1, tableRow.copy());
  //   }
  //   var line = lines[lines.length - i];
  //   Logger.log('line: ', line)

  //   tableRow.replaceText('#{TransactionDate}', line["Transaction Date"]); 
  //   tableRow.replaceText('#{TransactionID}', line["Transaction ID"]); 
  //   tableRow.replaceText('#{TransactionCategory}', line["Category"]);   
  //   tableRow.replaceText('#{Amount}', line["Amount"]);
  //   tableRow.replaceText('#{Balance}', line["Balance"]);
  //   tableRow.replaceText('#{Type}', line["Type"]);
  //   tableRow.replaceText('#{AccountID}', line["Account ID"]);
  //   tableRow.replaceText('#{Value}', line["Value"]);
    
  //   Logger.log('Finished inserting line: ', counter)

  //   totalAmount += parseFloat(line["Value"]);
  // }


  // body.replaceText('#{Total}', num2str(totalAmount));  

  
  
}